package ug.tech_ut.zad02.service;

import ug.tech_ut.zad02.domain.Door;

import java.sql.*;
import java.util.List;

public class DoorManagerJDBC implements DoorManager {
    private Connection connection;
    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createTableDoor = "CREATE TABLE Door(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
            "producer varchar(20), productionDate Date, isExterior bit, weight double)";

    private PreparedStatement addDoorStmt;
    private PreparedStatement deleteAllDoorsStmt;
    private PreparedStatement getAllDoorsStmt;

    private Statement statement;

    public DoorManagerJDBC() {
        try {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Person".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTableDoor);

            addDoorStmt = connection.prepareStatement("INSERT INTO Door (producer, productionDate, isExterior, weight) " +
                    "VALUES (?, ?, ?, ?)");
            deleteAllDoorsStmt = connection.prepareStatement("DELETE FROM Door");
            getAllDoorsStmt = connection.prepareStatement("SELECT * FROM Door");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    void clearDoors() {
        try {
            deleteAllDoorsStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public int addDoor(Door door) {
        int count = 0;
        try {
            addDoorStmt.setString(1, door.getProducer());
            addDoorStmt.setDate(2, door.getProductionDate());

            count = addPersonStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    @Override
    public List<Door> getAllDoors() {
        return null;
    }

    @Override
    public void addAllDoors(List<Door> doorsList) {

    }
}
