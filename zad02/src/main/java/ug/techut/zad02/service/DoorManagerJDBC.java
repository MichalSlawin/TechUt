package ug.techut.zad02.service;

import ug.techut.zad02.domain.Door;

import java.math.BigDecimal;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DoorManagerJDBC implements DoorManager {
    private Connection connection;
    private String url = "jdbc:hsqldb:hsql://localhost/workdb";
    private String createTableDoor = "CREATE TABLE Door(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
            "producer varchar(20), productionDate Date, isExterior bit, weight double)";
    private PreparedStatement addDoorStmt;
    private PreparedStatement deleteDoorStmt;
    private PreparedStatement deleteAllDoorsStmt;
    private PreparedStatement getAllDoorsStmt;

    private Statement statement;
    ResultSet rs;

    public DoorManagerJDBC() {
        try {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Door".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTableDoor);

            addDoorStmt = connection.prepareStatement("INSERT INTO Door (producer, productionDate, isExterior, weight) " +
                    "VALUES (?, ?, ?, ?)");
            deleteAllDoorsStmt = connection.prepareStatement("DELETE FROM Door");
            getAllDoorsStmt = connection.prepareStatement("SELECT * FROM Door");
            deleteDoorStmt = connection.prepareStatement("DELETE FROM Door WHERE id=?");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    void clearDoors() {
        try {
            deleteAllDoorsStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public int addDoor(Door door) {
        int count = 0;
        try {
            addDoorStmt.setString(1, door.getProducer());
            java.sql.Date sqlDate = new java.sql.Date(door.getProductionDate().getTime());
            addDoorStmt.setDate(2, sqlDate);
            addDoorStmt.setBoolean(3, door.isExterior());
            addDoorStmt.setDouble(4, door.getWeight());

            count = addDoorStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    @Override
    public int deleteDoor(int id) {
        int count = 0;

        try {
            deleteDoorStmt.setBigDecimal(1, new BigDecimal(id));

            count = deleteDoorStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    @Override
    public List<Door> getAllDoors() {
        List<Door> doorsList = new ArrayList<Door>();

        try {
            ResultSet rs = getAllDoorsStmt.executeQuery();

            while (rs.next()) {
                Door door = new Door();
                door.setId(rs.getInt("id"));
                door.setProducer(rs.getString("producer"));
                java.util.Date utilDate = new java.util.Date(rs.getDate("productionDate").getTime());
                door.setProductionDate(utilDate);
                door.setExterior(rs.getBoolean("isExterior"));
                door.setWeight(rs.getDouble("weight"));
                doorsList.add(door);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return doorsList;
    }

    @Override
    public void addAllDoors(List<Door> doorsList) {
        try {
            connection.setAutoCommit(false);
            for (Door door : doorsList) {
                addDoorStmt.setString(1, door.getProducer());
                java.sql.Date sqlDate = new java.sql.Date(door.getProductionDate().getTime());
                addDoorStmt.setDate(2, sqlDate);
                addDoorStmt.setBoolean(3, door.isExterior());
                addDoorStmt.setDouble(4, door.getWeight());
                addDoorStmt.executeUpdate();
            }
            connection.commit();

        } catch (SQLException exception) {

            try {
                connection.rollback();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
